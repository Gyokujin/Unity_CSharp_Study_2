using System.Collections;
using System.Collections.Generic;
using System.Security.Cryptography.X509Certificates;
using UnityEngine;

public class OOPPolymorphism : MonoBehaviour
{
    // 다형성(Polymorphism) : 객체가 다양한 형태를 가질 수 있음을 의미한다. 상속받아서 만들어진 파생 클래스를 통해 보여줄 수 있다.
    public class Example3
    {
        public virtual void Attack() // virtual
        {
            Debug.Log("Example3 Attack");
        }
    }

    public class Example4 : Example3
    {
        public override void Attack() // override(재정의) : 부모 클래스에서 virtual을 선언하면 자식 클래스에서 override 가능하다.
        {
            Debug.Log("Example4 Attack");
        }
    }

    public class Dragon
    {
        public virtual void OnDamaged()
        {

        }
    }

    public class RedDragon : Dragon
    {
        public override void OnDamaged()
        {
            Debug.Log("RedDragonDamaged");
        }
    }

    public class BlueDragon : Dragon
    {
        public override void OnDamaged()
        {
            Debug.Log("BlueDragonDamaged");
        }
    }

    public class Player
    {
        public void Attack(Dragon dragon) // 매개변수를 부모 클래스로 지정한다. 자식 클래스는 override 함수가 있기 때문에 문제없다.
        {
            dragon.OnDamaged();
        }
    }

    void Start()
    {
        Example4 example = new Example4();
        example.Attack();

        Dragon redDragon = new RedDragon(); // 부모 클래스 기반의 인스턴스를 생성한다. 형태는 부모 클래스이지만 메서드는 본인의 클래스(자식 클래스)의 것을 갖게 된다.
        Dragon blueDragon = new BlueDragon();

        List<Dragon> dragons = new List<Dragon>(); // 같은 부모 클래스를 기반으로 배열을 만들었기 때문에 관리하기에도 용이하다.
        dragons.Add(redDragon);
        dragons.Add(blueDragon);

        Player player = new Player();

        foreach (var dragon in dragons) // 각각의 자식 클래스는 같은 부모 클래스(Dragon)을 하나의 기준점으로 관리하게 되었다고 이해하면 편하다.
        {
            player.Attack(dragon);
        }
    }
}
