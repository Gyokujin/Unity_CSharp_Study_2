using System.Collections;
using System.Collections.Generic;
using UnityEngine;

public class OOPClass : MonoBehaviour
{
    // 객체지향 (Object Oriented Programming) OOP : 모든것을 객체로 표현하는 프로그래밍 패러다임
    // 객체 : 존재하는 모든 것

    // 클래스 : 객체를 만들기 위한 설계도. 어떤 속성과 기능을 가지게 할지 결정한다. (ex : 객체 => 자동차 / 클래스 => 자동차 설계도 / 속성 => 색상, 휠 사이즈, 차량번호 / 기능 => 주행, 정지)

    public class Orc
    {
        public int ATK; // 객체가 가지게 되는 변수이기 때문에 선언 후에도 값을 바꾸는 등 한 객체마다 고유의 변수를 갖게 된다.
        public string NAME;

        public Orc(int atk, string name) // 생성자 : 클래스명과 동일한 이름의 함수로 반환 타입이 없다. 매개변수를 입력받게 할 수 있다.
        {
            ATK = atk;
            NAME = name;
        }

        ~Orc() // 종료자 : 해당 객체의 인스턴스가 제거 될 때 실행되는 함수
        {
            Debug.Log("클래스 종료");
        }

        public void Attack()
        {
            Debug.Log(NAME + "가 " + ATK + "의 대미지를 주었습니다.");
        }
    }

    void Start()
    {
        Orc zozo; // 객체 생성(stack에 메모리 할당)
        zozo = new Orc(10, "ZOZO"); // 인스턴스 생성(heap에 메모리 할당). 인자값을 넣으면서 바로 초깃값을 할당 가능하다.
        zozo.ATK = 25;
        zozo.Attack();

        Orc yubi = new Orc(15, "YUBI");
        yubi.Attack();

        // Start() 메소드가 끝나면 stack()에 있는 zozo와 yubi가 제거되며, heap에 있는 Orc 인스턴스를 가비지 컬렉터로 보낸다.
    }
}
