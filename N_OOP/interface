using System.Collections;
using System.Collections.Generic;
using UnityEngine;

public class Interface : MonoBehaviour
{
    // 인터페이스 : 프로그래밍상 계약 혹은 약속을 의미하며 추상 클래스와 유사하다. 주로 이벤트, 인덱스, 프로퍼티, 메소드에 쓰인다.
    public interface IAnimal
    {
        public void Attack();
        // int num = 5; // 클래스의 특징을 가지기 때문에 변수를 가질수도 있다.
    }

    public class Tiger : IAnimal
    {
        public void Attack() // 추상 클래스와 다르게 override를 쓰지 않는다.
        {
            Debug.Log("Tiger Attack");
        }
    }

    public class Eagle : IAnimal
    {
        public void Attack()
        {
            Debug.Log("Eagle Attack");
        }
    }

    public interface IDASH
    {
        public void Dash();
    }

    public interface IJUMP
    {
        public void Jump();
    }

    public class Player : IDASH, IJUMP // 인터페이스는 클래스가 아니기 때문에 다중 상속이 가능하다.
    {
        public void Dash()
        {
            Debug.Log("Dash");
        }

        public void Jump()
        {
            Debug.Log("Jump");
        }
    }

    void Start()
    {
        // IDASH player = new IDASH(); // 인터페이스는 인스턴스 생성이 불가능하다.
    }
}
